<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL</title><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h2 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 20pt; }
 .s1 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9pt; }
 .s2 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 9pt; }
 .s3 { color: black; font-family:"Arial Narrow", sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s4 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 14pt; }
 .s5 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 18pt; }
 .s6 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt; }
 .s7 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s8 { color: #00F; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 9.5pt; }
 .s9 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s10 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 16pt; }
 .s11 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s12 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12.5pt; }
 .s13 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s14 { color: black; font-family:Calibri, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 h4 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 16pt; }
 .s16 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s17 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s18 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 a { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s19 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: bold; text-decoration: underline; font-size: 12pt; }
 .s20 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s21 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s22 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s23 { color: black; font-family:Calibri, sans-serif; font-style: italic; font-weight: bold; text-decoration: none; font-size: 14pt; }
 .s24 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11pt; }
 .s25 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 11pt; }
 .s26 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; vertical-align: 3pt; }
 .s27 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: underline; font-size: 14pt; }
 .s28 { color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 10.5pt; }
 .s29 { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .p, p { color: black; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; margin:0pt; }
 h3 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 18pt; }
 .s30 { color: #00F; font-family:"Courier New", monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s32 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 11.5pt; }
 h1 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 72pt; }
 li {display: block; }
 #l1 {padding-left: 0pt;counter-reset: c1 1; }
 #l1> li>*:first-child:before {counter-increment: c1; content: counter(c1, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l1> li:first-child>*:first-child:before {counter-increment: c1 0;  }
 #l2 {padding-left: 0pt;counter-reset: c2 1; }
 #l2> li>*:first-child:before {counter-increment: c2; content: counter(c2, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l2> li:first-child>*:first-child:before {counter-increment: c2 0;  }
 li {display: block; }
 #l3 {padding-left: 0pt;counter-reset: d1 1; }
 #l3> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 li {display: block; }
 #l4 {padding-left: 0pt; }
 #l4> li>*:first-child:before {content: " "; color: black; font-family:Symbol, serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 li {display: block; }
 #l5 {padding-left: 0pt;counter-reset: f1 1; }
 #l5> li>*:first-child:before {counter-increment: f1; content: counter(f1, decimal)". "; color: black; font-style: normal; font-weight: normal; text-decoration: none; }
 #l5> li:first-child>*:first-child:before {counter-increment: f1 0;  }
 li {display: block; }
 #l6 {padding-left: 0pt;counter-reset: g1 1; }
 #l6> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 13pt; }
 #l6> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l7 {padding-left: 0pt;counter-reset: g2 1; }
 #l7> li>*:first-child:before {counter-increment: g2; content: counter(g2, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: g2 0;  }
 table, tbody {vertical-align: top; overflow: visible; }
</style></head><body><p style="text-indent: 0pt;text-align: left;"><span><img width="96" height="93" alt="Description: logo 11" title="Description: logo 11" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_001.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="70" height="94" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_002.jpg"/></span></p><h2 style="padding-top: 3pt;padding-left: 50pt;text-indent: 0pt;line-height: 23pt;text-align: center;">SAI VIDYA INSTITUTE OF TECHNOLOGY</h2><p class="s1" style="padding-left: 50pt;text-indent: 0pt;line-height: 10pt;text-align: center;">(Affiliated to VTU, Belagavi, Approved by AICTE, New Delhi and Govt. of Karnataka)</p><p class="s2" style="padding-top: 1pt;padding-left: 50pt;text-indent: 0pt;line-height: 10pt;text-align: center;">Accredited by NBA, New Delhi (CSE, ISE, ECE, MECH, CIVIL), NAAC - &quot;A&quot; GRADE</p><p class="s3" style="padding-left: 51pt;text-indent: 0pt;line-height: 13pt;text-align: center;">Rajanukunte, Bengaluru-560064</p><p style="text-indent: 0pt;text-align: left;"><span><img width="233" height="78" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_003.png"/></span></p><p class="s4" style="padding-top: 6pt;padding-left: 27pt;text-indent: 0pt;text-align: center;">MOTTO</p><p class="s5" style="padding-top: 7pt;padding-left: 27pt;text-indent: 0pt;text-align: center;">“Learn to lead”</p><p style="text-indent: 0pt;text-align: left;"/><p class="s6" style="padding-left: 51pt;text-indent: 0pt;text-align: center;">Tel: 080-2846 8196, Fax: 2846 8193 / 98<span class="s7">, Web</span><a href="http://www.saividya.ac.in/" style=" color: black; font-family:Arial, sans-serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 9.5pt;" target="_blank">: </a><a href="http://www.saividya.ac.in/" class="s8" target="_blank">www.saividya.ac.in</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 40pt;text-indent: 0pt;text-align: left;"><span style=" color: black; font-style: normal; font-weight: normal; text-decoration: none;">	</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="296" height="153" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_004.png"/></span></p><p class="s4" style="text-indent: 0pt;line-height: 15pt;text-align: left;">VISION</p><p style="text-indent: 0pt;text-align: left;"/><p class="s9" style="text-indent: 0pt;text-align: justify;">Contribute dedicated, skilled, intelligent engineers and business administrators to architect strong India and the world.</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="322" height="153" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_005.png"/></span></p><p class="s4" style="padding-top: 9pt;padding-left: 89pt;text-indent: 0pt;text-align: center;">MISSION</p><p class="s9" style="padding-top: 12pt;padding-left: 13pt;text-indent: 0pt;text-align: justify;">To impart quality technical education and higher moral ethics associated with skilled training to suit the modern day technology with innovative concepts, so as to learn to lead the future with full confidence</p><p style="text-indent: 0pt;text-align: left;"/><p class="s10" style="padding-left: 51pt;text-indent: 0pt;line-height: 31pt;text-align: center;">COMPUTER GRAPHICS LABORATORY WITH MINI PROJECT (18CSL67)</p><p class="s11" style="padding-left: 50pt;text-indent: 0pt;text-align: center;">(<span class="s12">As per Visvesvaraya Technological University Syllabus)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 4pt;padding-left: 46pt;text-indent: 0pt;text-align: center;">Compiled by:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s13" style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">Prof. Syed Matheen Pasha</p><p style="text-indent: 0pt;text-align: left;"><span><img width="326" height="118" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_006.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s14" style="padding-top: 9pt;padding-left: 11pt;text-indent: 0pt;line-height: 188%;text-align: left;">Name: <u>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </u> USN                 :<u> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </u></p><p style="text-indent: 0pt;text-align: left;"/><p class="s11" style="padding-left: 68pt;text-indent: -11pt;text-align: left;">Assistant Professor Dept. of CSE</p><p class="s13" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">Prof. Vijayakumari G</p><p class="s11" style="padding-left: 58pt;text-indent: -12pt;text-align: left;">Assistant Professor Dept. of CSE</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 4pt;padding-left: 51pt;text-indent: 0pt;line-height: 18pt;text-align: center;">DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING</h4><p class="s16" style="padding-left: 51pt;text-indent: 0pt;line-height: 13pt;text-align: center;">2022-23</p><h4 style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Disclaimer</h4><p class="s16" style="padding-top: 4pt;padding-left: 20pt;text-indent: 0pt;line-height: 111%;text-align: justify;">The information contained in this document is the proprietary and exclusive property of SaiVidya Institute of Technology except as otherwise indicated. No part of this document, in whole or in part, may be reproduced, stored, transmitted, or used for course material development purposes without the prior written permission of Sai Vidya Institute of Technology. The information contained in this document is subject to change without notice. The information in this document is provided for informational purposes only.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 11pt;padding-bottom: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Trademark</h4><p style="padding-left: 48pt;text-indent: 0pt;text-align: left;"><span><img width="155" height="148" alt="Description: logo 11" title="Description: logo 11" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_007.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-left: 20pt;text-indent: 0pt;text-align: left;">Edition: 2022-23</h4><p style="text-indent: 0pt;text-align: left;"><br/></p><h4 style="padding-top: 4pt;padding-left: 20pt;text-indent: 0pt;text-align: left;">Document Owner</h4><p class="s16" style="padding-top: 1pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">The primary contacts for questions regarding this document are:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:35.524pt" cellspacing="0"><tr style="height:14pt"><td style="width:96pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:207pt"><p class="s17" style="padding-left: 34pt;text-indent: 0pt;line-height: 13pt;text-align: left;">1. Prof. Syed Matheen Pasha</p></td></tr><tr style="height:28pt"><td style="width:96pt"><p class="s17" style="padding-left: 2pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Author(s):</p></td><td style="width:207pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 34pt;text-indent: 0pt;line-height: 14pt;text-align: left;">2. Prof. Vijayakumari G</p></td></tr><tr style="height:42pt"><td style="width:96pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Department:</p></td><td style="width:207pt"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s17" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">Computer Science and Engineering</p></td></tr><tr style="height:55pt"><td style="width:303pt" colspan="2"><p style="padding-left: 2pt;padding-right: 47pt;text-indent: 0pt;line-height: 28pt;text-align: left;"><a href="mailto:syedmatheen.pasha@saividya.ac.in" class="s18" target="_blank">Contact email ids: syedmatheen.pasha@saividya.ac.in</a></p></td></tr></table><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><a href="mailto:vijayakumari.g@saividya.ac.in">vijayakumari.g@saividya.ac.in</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="633" height="107" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_008.png"/></span></p><p class="s19" style="padding-top: 7pt;padding-left: 168pt;text-indent: 0pt;text-align: center;">DEPARTMENT VISION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s20" style="padding-left: 11pt;text-indent: 0pt;line-height: 114%;text-align: left;">Contribute dedicated, skilled, intelligent Computer Engineers to architect strong India and the world.</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="633" height="216" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_009.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 168pt;text-indent: 0pt;text-align: center;">DEPARTMENT MISSION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s20" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">Provide quality education in Computer Science by promoting excellence in Instruction, Research and Practice.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s20" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">Promote Professional Interaction and Lifelong Learning</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s20" style="padding-left: 33pt;text-indent: 0pt;text-align: left;">Encourage the youths to pursue career in Computer domain with modern innovation and ethics.</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="628" height="252" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_010.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s19" style="padding-left: 82pt;text-indent: 0pt;text-align: center;">DEPARTMENT PROGRAM EDUCATIONAL OBJECTIVE</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s21" style="padding-left: 16pt;text-indent: 0pt;line-height: 114%;text-align: left;">PEO 1:<span class="s20">Graduates will have the expertise in analyzing real time problems and providing appropriate solutions related to Computer Science &amp; Engineering.</span></p><p class="s21" style="padding-top: 5pt;padding-left: 16pt;text-indent: 0pt;line-height: 114%;text-align: left;">PEO 2:<span class="s20">Graduates will have the knowledge of fundamental principles and innovative technologies to succeed in higher studies, and research.</span></p><p class="s21" style="padding-top: 5pt;padding-left: 16pt;text-indent: 0pt;line-height: 114%;text-align: left;">PEO 3:<span class="s20">Graduates will continue to learn and to adapt technology developments combined with deep awareness of ethical responsibilities in profession.</span></p><p class="s20" style="padding-top: 5pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s22" style="padding-top: 3pt;padding-left: 50pt;text-indent: 0pt;text-align: center;">DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 36pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="655" height="1" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_011.png"/></span></p><p class="s23" style="padding-left: 50pt;text-indent: 0pt;text-align: center;">Program Outcomes</p><ol id="l1"><li data-list-text="1."><p class="s22" style="padding-top: 7pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Engineering knowledge<span class="s16">: Apply the knowledge of mathematics, science, engineering fundamentals, and an engineering specialization to the solution of complex engineering problems.</span></p></li><li data-list-text="2."><p class="s22" style="padding-top: 4pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Problem analysis<span class="s16">: Identify, formulate, research literature, and analyze complex engineering problems reaching substantiated conclusions using first principles of mathematics, natural sciences, and engineering sciences.</span></p></li><li data-list-text="3."><p class="s22" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Design/development of solutions<span class="s16">: Design solutions for complex engineering problems and design system components or processes that meet the specified needs with appropriate consideration for the public health and safety, and the cultural, societal, and environmental considerations.</span></p></li><li data-list-text="4."><p class="s22" style="padding-top: 4pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Conduct investigations of complex problems<span class="s16">: Use research-based knowledge and research methods including design of experiments, analysis and interpretation of data, and synthesis of the information to provide valid conclusions.</span></p></li><li data-list-text="5."><p class="s22" style="padding-top: 4pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Modern tool usage<span class="s16">: Create, select, and apply appropriate techniques, resources, and modern engineering and IT tools including prediction and modeling to complex engineering activities with an understanding of the limitations.</span></p></li><li data-list-text="6."><p class="s22" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">The engineer and society<span class="s16">: Apply reasoning informed by the contextual knowledge to assess societal, health, safety, legal, and cultural issues and the consequent responsibilities relevant to the professional engineering practice</span></p></li><li data-list-text="7."><p class="s22" style="padding-top: 4pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Environment and sustainability<span class="s16">: Understand the impact of the professional engineering solutions in societal and environmental contexts, and demonstrate the knowledge of, and need for sustainable development.</span></p></li><li data-list-text="8."><p class="s22" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Ethics<span class="s16">: Apply ethical principles and commit to professional ethics and responsibilities and norms of the engineering practice.</span></p></li><li data-list-text="9."><p class="s22" style="padding-top: 4pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Individual and team work<span class="s16">: Function effectively as an individual, and as a member or leader in diverse teams, and in multidisciplinary settings.</span></p></li><li data-list-text="10."><p class="s22" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Communication<span class="s16">: Communicate effectively on complex engineering activities with the engineering community and with society at large, such as, being able to comprehend and write effective reports and design documentation, make effective presentations, and give and receive clear instructions.</span></p></li><li data-list-text="11."><p class="s22" style="padding-top: 4pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Project management and finance<span class="s16">: Demonstrate knowledge and understanding of the engineering and management principles and apply these to one’s own work, as a member and leader in a team, to manage projects and in multidisciplinary environments.</span></p></li><li data-list-text="12."><p class="s22" style="padding-top: 3pt;padding-left: 20pt;text-indent: 0pt;text-align: justify;">Life-long learning: <span class="s16">Recognize the need for, and have the preparation and ability to engage in independent and life-long learning in the broadest context of technological change.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s23" style="padding-top: 9pt;padding-left: 50pt;text-indent: 0pt;text-align: center;">Program Specific Outcomes</p><p class="s22" style="padding-top: 7pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">PSO 1:<span class="s16">Demonstrate the knowledge and understanding of working principles, design, implement, test and evaluate the hardware and software components of a computer system.</span></p><p class="s22" style="padding-top: 5pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">PSO2:<span class="s16">Apply standard Software Engineering practices and strategies in software project development.</span></p><p class="s22" style="padding-top: 4pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">PSO3:<span class="s16">Demonstrate the knowledge of Discrete Mathematics, Data management and Data engineering.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 36pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="645" height="1" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_012.png"/></span></p><p class="s19" style="padding-top: 3pt;padding-left: 30pt;text-indent: 0pt;text-align: center;">PROGRAM SPECIFIC OUTCOMES</p><p class="s24" style="padding-top: 8pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">Computer Science and Engineering Graduates will be able to:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 9pt;text-indent: 0pt;line-height: 115%;text-align: left;">PSO1: <span class="s25">Demonstrate the knowledge and understanding of working principles, design, implement, test and evaluate the hardware and software components of a computer system.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">PSO2<span class="s25">: Apply standard Software Engineering practices and strategies in software project development.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">PSO3<span class="s25">: Demonstrate the knowledge of Discrete Mathematics, Data Management and Data Engineering.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-top: 10pt;padding-left: 30pt;text-indent: 0pt;text-align: center;"><a name="bookmark0">COMPUTER GRAPHICS LABORATORY WITH MINI PROJECT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">Subject Code: 18CSL67                           I.A. Marks  : 40</p><p class="s22" style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Hours/Week : 01I + 02 P                           Exam Hours : 03</p><p class="s22" style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Total Hours : 40                                Exam Marks :60</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">COURSE OUTCOMES:</p><p class="s16" style="padding-top: 6pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">After the completion of this course the students will be able to:</p><p class="s26" style="padding-top: 6pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">CO1  <span class="s16">Apply the concepts of computer graphics</span></p><p class="s26" style="padding-top: 3pt;padding-left: 39pt;text-indent: 0pt;line-height: 127%;text-align: left;">CO2  <span class="s16">Implement computer graphics applications using OpenGL CO3  Implement real world problems using OpenGL</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-left: 31pt;text-indent: 0pt;text-align: center;"><a name="bookmark1">PART A - Lab Experiments</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">Design, develop, and implement the following programs using OpenGL API</p><ol id="l2"><li data-list-text="1."><p class="s16" style="padding-top: 6pt;padding-left: 74pt;text-indent: -18pt;text-align: left;">Implement Bresenham’s line drawing algorithm for all types of slope.</p></li><li data-list-text="2."><p class="s16" style="padding-top: 6pt;padding-left: 74pt;text-indent: -18pt;text-align: left;">Create and rotate a triangle about the origin and a fixed point.</p></li><li data-list-text="3."><p class="s16" style="padding-top: 6pt;padding-left: 74pt;text-indent: -18pt;text-align: left;">Draw a colour cube and spin it using OpenGL transformation matrices.</p></li><li data-list-text="4."><p class="s16" style="padding-top: 7pt;padding-left: 74pt;text-indent: -18pt;line-height: 150%;text-align: left;">Draw a color cube and allow the user to move the camera suitably to experiment with perspective viewing.</p></li><li data-list-text="5."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;text-align: left;">Clip a lines using Cohen-Sutherland algorithm</p></li><li data-list-text="6."><p class="s16" style="padding-top: 6pt;padding-left: 74pt;text-indent: -18pt;line-height: 151%;text-align: justify;">To draw a simple shaded scene consisting of a tea pot on a table. Define suitably the position and properties of the light source along with the properties of the surfaces of the solid object used in the scene.</p></li><li data-list-text="7."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 150%;text-align: justify;">Design, develop and implement recursively subdivide a tetrahedron to form 3D sierpinski gasket. The number of recursive steps is to be specified by the user.</p></li><li data-list-text="8."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: justify;">Develop a menu driven program to animate a flag using Bezier Curve algorithm</p></li><li data-list-text="9."><p class="s16" style="padding-top: 6pt;padding-left: 74pt;text-indent: -18pt;text-align: justify;">Develop a menu driven program to fill the polygon using scan line algorithm</p></li></ol></li></ol><p class="s22" style="padding-top: 3pt;padding-left: 31pt;text-indent: 0pt;text-align: center;"><a name="bookmark2">PART B - MINI-PROJECT</a></p><p class="s16" style="padding-top: 6pt;padding-left: 38pt;text-indent: 0pt;line-height: 150%;text-align: justify;">Student should develop mini project on the topics mentioned below or similar applications using Open GL API. Consider all types of attributes like color, thickness, styles, font, background, speed etc., while doing mini project.</p><p class="s16" style="padding-left: 38pt;text-indent: 0pt;line-height: 153%;text-align: justify;"><a name="bookmark3">(</a><b>During the practical exam: the students should demonstrate and answer Viva-Voce</b>) <b>Sample Topics: Simulation of concepts of OS, Data structures, algorithms etc.</b></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">Note:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l3"><li data-list-text="1."><p class="s16" style="padding-top: 10pt;padding-left: 50pt;text-indent: -12pt;text-align: left;">All laboratory experiments from part A are to be included for practical examination.</p></li><li data-list-text="2."><p class="s16" style="padding-top: 6pt;padding-left: 50pt;text-indent: -12pt;text-align: left;">Mini project has to be evaluated for 60 Marks.</p></li><li data-list-text="3."><p class="s16" style="padding-top: 6pt;padding-left: 50pt;text-indent: -12pt;text-align: left;">Report should be prepared in a standard format prescribed for project work.</p></li><li data-list-text="4."><p class="s16" style="padding-top: 6pt;padding-left: 50pt;text-indent: -12pt;text-align: left;">Students are allowed to pick one experiment from the lot.</p></li><li data-list-text="5."><p class="s16" style="padding-top: 7pt;padding-left: 50pt;text-indent: -12pt;text-align: left;">Strictly follow the instructions as printed on the cover page of answer script.</p></li><li data-list-text="6."><p class="s16" style="padding-top: 6pt;padding-left: 50pt;text-indent: -12pt;text-align: left;">Marks distribution:</p></li></ol><p class="s25" style="padding-top: 7pt;padding-left: 40pt;text-indent: -2pt;line-height: 206%;text-align: left;">Part A – Procedure + Execution + Viva = 6 + 28 + 6 = 40 Marks Part B – Procedure + Execution + Viva = 9 + 42 + 9 = 60 Marks</p><p class="s16" style="padding-left: 38pt;text-indent: 0pt;line-height: 150%;text-align: left;">Change of experiment is allowed only once and marks allotted to the procedure part to be made zero.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: center;"><a name="bookmark4">Introduction to OpenGL</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_013.png"/></span></p><p class="s16" style="padding-left: 38pt;text-indent: 0pt;line-height: 150%;text-align: justify;">OpenGL is a software interface to graphics hardware. This interface consists of about 150 distinct commands that you use to specify the objects and operations needed to produce interactive three-dimensional applications. OpenGL is designed as a streamlined, hardware- independent interface to be implemented on many different hardware platforms. With OpenGL, you can build up your desired model from a small set of <i>geometric primitives </i>- points, lines, and polygons. A sophisticated library that provides these features could certainly be built on top of OpenGL. The OpenGL Utility Library (GLU) provides many of the modeling features. GLU is a standard part of every OpenGL implementation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 9pt;padding-left: 38pt;text-indent: 0pt;text-align: justify;"><a name="bookmark5">OpenGL-Related Libraries</a></p><p class="s16" style="padding-top: 7pt;padding-left: 38pt;text-indent: 0pt;line-height: 150%;text-align: justify;">OpenGL provides a powerful but primitive set of rendering commands, and all higher-level drawing must be done in terms of these commands. Also, OpenGL programs have to use the underlying mechanisms of the windowing system. A number of libraries exist to allow you to simplify your programming tasks, including the following:</p><ul id="l4"><li data-list-text=""><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 148%;text-align: justify;">The OpenGL Utility Library (GLU) contains several routines that use lower-level OpenGL commands to perform such tasks as setting up matrices for specific viewing orientations and projections, performing polygon tessellation, and rendering surfaces. This library is provided as part of every OpenGL implementation. GLU routines use the prefix <b>glu</b>.</p></li><li data-list-text=""><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 149%;text-align: justify;">The OpenGL Utility Toolkit (GLUT) is a window system-independent toolkit. It contains rendering commands but is designed to be independent of any window system or operating system. Consequently, it contains no commands for opening windows or reading events from the keyboard or mouse. Since OpenGL drawing commands are limited to those that generate simple geometric primitives (points, lines, and polygons), GLUT includes several routines that create more complicated three-dimensional objects such as a sphere, a torus, and a teapot. GLUT may not be satisfactory for full-featured OpenGL applications, but you may find it a useful starting point for learning OpenGL.</p></li></ul><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><a name="bookmark6">Include Files</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="625" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_014.png"/></span></p><p class="s16" style="text-indent: 0pt;line-height: 150%;text-align: left;">inclusion of the glu.h header file. So almost every OpenGL source file begins with #include &lt;GL/gl.h&gt;</p><p class="s16" style="text-indent: 0pt;text-align: left;">#include &lt;GL/glu.h&gt;</p><p class="s16" style="padding-top: 5pt;text-indent: 0pt;line-height: 153%;text-align: left;">If you are using GLUT for managing your window manager tasks, you should include #include &lt;GL/glut.h&gt;</p><p class="s16" style="text-indent: 0pt;line-height: 13pt;text-align: left;">Note that glut.h includes gl.h, glu.h automatically, so including all three files is redundant.</p><p style="text-indent: 0pt;text-align: left;"/><p class="s4" style="text-indent: 0pt;line-height: 15pt;text-align: left;">OpenGL Primitives</p><p style="text-indent: 0pt;text-align: left;"/><p class="s27" style="text-indent: 0pt;line-height: 15pt;text-align: left;">Run the following commands to install OpenGLon Ubuntu<span class="s28">.</span></p><p style="padding-top: 12pt;text-indent: 0pt;text-align: left;"><span class="s29" style=" background-color: #F8F8FF;">$ sudo apt-get update</span></p><p style="text-indent: 0pt;line-height: 94%;text-align: left;"><span class="s29" style=" background-color: #F8F8FF;">$ sudo apt-get install libglu1-mesa-dev freeglut3-dev mesa-</span><span class="p"> </span><span class="s29" style=" background-color: #F8F8FF;">common-dev</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="padding-top: 7pt;padding-left: 38pt;text-indent: 0pt;line-height: 152%;text-align: left;">For all OpenGL applications, you want to include the gl.h header file in every file. Almost all OpenGL applications use GLU, the aforementioned OpenGL Utility Library, which requires</p><p style="text-indent: 0pt;text-align: left;"><br/></p><h3 style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: center;">Sample programs</h3><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l5"><li data-list-text="1."><p class="s22" style="padding-left: 50pt;text-indent: -13pt;text-align: left;"><a name="bookmark7">Program to create a basic Open GL window</a></p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_015.png"/></span></p><p class="s30" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">#include<span style=" color: #A21515;">&lt;GL/glut.h&gt; </span>void <span style=" color: #000;">display (</span>void<span style=" color: #000;">)</span></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glClearColor (0.0,0.0,0.0,1.0); glClear (GL_COLOR_BUFFER_BIT); glLoadIdentity ( );</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">gluLookAt (0.0,0.0,5.0,0.0,0.0,0.0,0.0,1.0,0.0);</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glFlush ( );</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p class="s30" style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">int <span style=" color: #000;">main (</span>int <span style=" color: #000;">argc, </span>char <span style=" color: #000;">**argv)</span></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glutInit (&amp;argc, argv); glutInitDisplayMode (GLUT_SINGLE); glutInitWindowSize (500,500);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glutInitWindowPosition (100,100); glutCreateWindow (<span style=" color: #A21515;">&quot;A basic open GL window&quot;</span>); glutDisplayFunc (display);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glutMainLoop ( ); <span style=" color: #00F;">return </span>0;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="2."><p class="s32" style="padding-top: 8pt;padding-left: 49pt;text-indent: -11pt;text-align: left;">Program to draw/display point in OpenGL</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s30" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">#include<span style=" color: #A21515;">&lt;GL/glut.h&gt; </span>#include<span style=" color: #A21515;">&lt;stdlib.h&gt; </span>void<span style=" color: #000;">myInit(</span>void<span style=" color: #000;">)</span></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glClearColor(2.0,2.0,2.0,4.0);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glColor3f(0.0f,0.0f,0.0f); glPointSize(4.0); glMatrixMode(GL_PROJECTION); glLoadIdentity(); gluOrtho2D(0.0,640.0,0.0,480.0);</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p class="s30" style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">void <span style=" color: #000;">display(</span>void<span style=" color: #000;">)</span></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glClear(GL_COLOR_BUFFER_BIT); glBegin(GL_POINTS); glVertex2i(100,200); glVertex2i(400,200);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: justify;">glVertex2i(200,100); glVertex2i(200,400); glEnd();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glFlush();</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p class="s30" style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">void <span style=" color: #000;">main(</span>int<span style=" color: #000;">argc, </span>char<span style=" color: #000;">** argv)</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_016.png"/></span></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glutInit(&amp;argc,argv); glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); glutInitWindowSize(500,500); glutInitWindowPosition(100,150); glutCreateWindow(<span style=" color: #A21515;">&quot;My First Attempt&quot;</span>); glutDisplayFunc(display);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">myInit(); glutMainLoop();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p></li><li data-list-text="3."><p class="s22" style="padding-top: 11pt;padding-left: 48pt;text-indent: -10pt;text-align: left;"><a name="bookmark8">Program to implement horizontal and vertical lines</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s30" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">#include<span style=" color: #A21515;">&lt;GL/glut.h&gt; </span>#include<span style=" color: #A21515;">&lt;stdlib.h&gt; </span>void <span style=" color: #000;">myInit(</span>void<span style=" color: #000;">)</span></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glClearColor(2.0,2.0,2.0,4.0);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glColor3f(0.0f,0.0f,0.0f); glLineWidth(4.0); glMatrixMode(GL_PROJECTION); glLoadIdentity(); gluOrtho2D(0.0,640.0,0.0,480.0);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p class="s30" style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Void <span style=" color: #000;">drawLineInt(GLint x1,GLint y1,GLint x2,GLint y2)</span></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: justify;">glBegin(GL_LINES); glVertex2i(x1,y1); glVertex2i(x2,y2); glEnd();</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p class="s30" style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">void <span style=" color: #000;">display(</span>void<span style=" color: #000;">)</span></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glClear(GL_COLOR_BUFFER_BIT); glBegin(GL_LINES); glVertex2i(100,200); glVertex2i(400,200); glVertex2i(200,100); glVertex2i(200,400); glEnd();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">glFlush();</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p class="s30" style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">void <span style=" color: #000;">main(</span>int <span style=" color: #000;">argc, </span>char<span style=" color: #000;">** argv)</span></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_017.png"/></span></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glutInit(&amp;argc,argv); glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); glutInitWindowSize(500,500); glutInitWindowPosition(100,150); glutCreateWindow(<span style=" color: #A21515;">&quot;My First Attempt&quot;</span>); glutDisplayFunc(display);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">myInit(); drawLineInt(100,200,40,60); glutMainLoop();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="4."><p class="s22" style="padding-top: 10pt;padding-left: 50pt;text-indent: -13pt;text-align: left;"><a name="bookmark9">Program to create keyboard interface &amp; window sizing</a></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">#include&lt;GL/glut.h&gt; void display()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glClearColor(1.0,1.0,1.0,0.0); glClear(GL_COLOR_BUFFER_BIT); glFlush();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">void keyboard(unsigned char key, int x, int y)</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{ /* called when a key is pressed */ if(key==27) exit(0); /* 27 is the escape */</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">int main(int argc, char **argv)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glutInit(&amp;argc, argv); /* Initialize OpenGL*/ glutInitWindowSize(500,500); /*Set Window size*/ glutInitWindowPosition(10,10); /*Set Window Position*/ glutCreateWindow(“Hai”); /* Create the window*/ glutDisplayFunc(display);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glutKeyboardFunc(keyboard); glutMainLoop();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="5."><p class="s22" style="padding-left: 38pt;text-indent: 0pt;text-align: left;">Program to rotate a cube <span class="p">#include&lt;GL/glut.h&gt; GLfloat angle=0.0; void spin(void)</span></p></li></ol><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_018.png"/></span></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">Angle+=1.0; glutPostRedisplay()</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void display(void)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glClear(GL_COLOR_BUFFER_BIT); glLoadIdentity();</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">gluLookAt(0.0,0.0,0.5,0.0,0.0,0.0,0.0,1.0,0.0);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: justify;">glRotatef(angle,1,0,0); glRotatef(angle,0,1,0); glRotatef(angle,0,0,1); glutWireCube(2.0);</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void reshape(int width, int height)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glViewport(0,0,(GLsizei)width, (GLsizei)height); glMatrixMode(GL_PROJECTION);</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glLoadIdentity();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">gluPerspective(60, (GLfloat)width / (GLfloat)height,1.0,100); glMatrixMode(GL_MODELVIEW);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">int main(int argc,char **argv)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glutInit(&amp;argc,argv); glutInitWindowSize(500,500); glutInitWindowPosition(100,100); glutCreateWindow(“Rotating Cube”); glutDisplayFunc(display); glutReshape(reshape); gltuIdleFunc(spin); glutMainLoop();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_019.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><h1 style="padding-top: 69pt;padding-left: 80pt;text-indent: 0pt;text-align: center;">PART A</h1><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l6"><li data-list-text="1."><p class="s4" style="padding-top: 4pt;padding-left: 49pt;text-indent: -11pt;text-align: left;"><a name="bookmark10">Implement Brenham’s line drawing algorithm for all types of slope</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">#include &lt;GL/glut.h&gt; #include&lt;math.h&gt; #include&lt;stdio.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_020.png"/></span></p><p style="padding-top: 1pt;padding-left: 38pt;text-indent: 0pt;line-height: 27pt;text-align: left;">GLint xOne, yOne, xTwo, yTwo; void init();</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 12pt;text-align: justify;">void setPixel(GLint, GLint);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: justify;">void lineBres_L1(GLint, GLint, GLint, GLint, GLfloat) ; void lineBres_GE1(GLint, GLint, GLint, GLint, GLfloat); void display();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">void main(int argc, char**argv)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">printf(&quot;*********Bresenham&#39;s Line Drawing Algorithm********&quot;); printf(&quot;\nEnter starting vertex (x1, y1):&quot;); scanf(&quot;%d%d&quot;,&amp;xOne, &amp;yOne);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">printf(&quot;\nEnter ending vertex (x2, y2):&quot;); scanf(&quot;%d%d&quot;,&amp;xTwo, &amp;yTwo); glutInit(&amp;argc,argv);//initialize GLUT</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">//initialize display mode glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glutInitWindowSize(400,400); //set display-window width &amp; height</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">//set display-window upper-left position glutInitWindowPosition(200,200); glutCreateWindow(&quot;Bresenhams Line Drawing Algorithm&quot;);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">//create display-window with a title init();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">//call graphics to be displayed on the window glutDisplayFunc(display);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glutMainLoop(); //display everything and wait</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void init()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glClearColor(0.0, 1.0, 0.0, 0); glMatrixMode(GL_PROJECTION); glLoadIdentity(); gluOrtho2D(0.0,500,0.0,500);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void display()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glClear(GL_COLOR_BUFFER_BIT); GLfloat m;</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">m=(float)(yTwo-yOne)/(xTwo-xOne);</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">//compute slope</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_021.png"/></span></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">//call required function based on value of slope if(fabs(m)&gt;=1) lineBres_GE1(xOne,yOne,xTwo,yTwo,m);</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">else</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">lineBres_L1(xOne, yOne, xTwo,yTwo, m);</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">//Bresenham line-drawing procedure for |m| &lt; 1.0</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">void lineBres_L1(GLint x0, GLint y0, GLint xEnd, GLint yEnd, GLfloat m)</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">GLint dx = abs(xEnd - x0); GLint dy = abs(yEnd - y0); GLint p = 2 * dy - dx; GLint twoDy = 2 * dy;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">GLint twoDyMinusDx = 2 * (dy-dx); GLint x=x0,y=y0;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">// determine which point to use as start position if (x0 &gt; xEnd)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 11pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">else</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">x = xEnd; y = yEnd; xEnd = x0;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 10pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">x = x0; y = y0;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">setPixel(x,y); while(x&lt;xEnd)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">x++;</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">if(p&lt;0)</p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">p += twoDy; else</p><p style="padding-left: 110pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 146pt;text-indent: 0pt;text-align: left;">if(m&lt;0)</p><p style="padding-left: 182pt;text-indent: 0pt;text-align: left;">y--;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;text-indent: 0pt;text-align: right;">else</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">y++;</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">p += twoDyMinusDx;</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">setPixel(x,y);</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_022.png"/></span></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">//Bresenham line-drawing procedure for |m| &gt;= 1.0</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">void lineBres_GE1(GLint x0, GLint y0, GLint xEnd, GLint yEnd, GLfloat m)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: justify;">GLint dx = abs(xEnd - x0); GLint dy = abs(yEnd - y0); GLint p=2*dx-dy;</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: justify;">GLint twoDx = 2*dx;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">GLint twoDxMinusDy=2*(dx-dy); GLint x=x0,y=y0;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">// determine which point to use as start position if (y0 &gt; yEnd)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">else</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: justify;">x = xEnd; y = yEnd; yEnd = y0;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 11pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">x = x0; y = y0;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">setPixel(x,y); while(y&lt;yEnd)</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">y++;</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">if(p&lt;0) p+=twoDx; else</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">if(m&lt;0)</p><p style="padding-left: 146pt;text-indent: 0pt;line-height: 13pt;text-align: left;">x--;</p><p style="text-indent: 0pt;text-align: right;">else</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 16pt;text-indent: 0pt;text-align: center;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">x++;</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">p+=twoDxMinusDy;</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">setPixel(x,y);</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void setPixel(GLint xCoordinate, GLint yCoordinate)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glColor3f(1.0, 0.0, 0.0); glBegin(GL_POINTS);</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="627" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_023.png"/></span></p><p style="padding-left: 38pt;text-indent: 36pt;text-align: left;">glVertex2i(xCoordinate,yCoordinate); glEnd();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">//executes all OpenGL functions as quickly as possible glFlush();</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-top: 10pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><a name="bookmark11">OUTPUT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="2."><p class="s4" style="padding-top: 4pt;padding-left: 49pt;text-indent: -11pt;text-align: left;">Create and rotate a triangle about the origin and a fixed point</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">#include&lt;stdio.h&gt; #include&lt;GL/glut.h&gt; int x,y;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_024.png"/></span></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">int where_to_rotate=0;</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">float translate_x=0.0,translate_y=0.0,rotate_angle=0.0;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void draw_pixel(float x1,float y1)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glPointSize(5.0); glBegin(GL_POINTS);</p><p style="padding-left: 74pt;text-indent: 36pt;text-align: left;">glVertex2f(x1,y1); glEnd();</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">void triangle(int x,int y)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">// set interior color of triangle to green glColor3f(0.0,1.0,0.0); glBegin(GL_POLYGON);</p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">glVertex2f(x,y); glVertex2f(x+400,y+400); glVertex2f(x+300,y+0);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glEnd(); glFlush();</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">void display()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glClear(GL_COLOR_BUFFER_BIT); glLoadIdentity(); glColor3f(1.0,0.0,0.0); //color of point draw_pixel(0.0,0.0); if(where_to_rotate==1)</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">translate_x=0.0; translate_y=0.0; rotate_angle+=0.9;</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">if(where_to_rotate==2)</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">translate_x=x; translate_y=y; rotate_angle+=0.9; glColor3f(0.0,0.0,1.0); draw_pixel(x,y);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">glTranslatef(translate_x,translate_y,0.0); glRotatef(rotate_angle,0.0,0.0,1.0); glTranslatef(-translate_x,-translate_y,0.0); triangle(translate_x,translate_y); glutPostRedisplay();</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glutSwapBuffers();</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_025.png"/></span></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void init()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glClearColor(1.0,1.0,1.0,1.0); //background color to white glMatrixMode(GL_PROJECTION);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glLoadIdentity();</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">gluOrtho2D(-800.0,800.0,-800.0,800.0);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glMatrixMode(GL_MODELVIEW);</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void rotate_menu(int option)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">if(option==1)</p><p style="padding-left: 74pt;text-indent: 36pt;text-align: left;">where_to_rotate=1; if(option==2)</p><p style="padding-left: 74pt;text-indent: 36pt;text-align: left;">where_to_rotate=2; if(option==3)</p><p style="padding-left: 74pt;text-indent: 36pt;text-align: left;">where_to_rotate=3; display();</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">int main(int argc,char **argv)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">printf(&quot;\nEnter fixed points for rotation (x,y) : &quot;); scanf(&quot;%d%d&quot;,&amp;x,&amp;y);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glutInit(&amp;argc,argv); glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB); glutInitWindowSize(800,800); glutInitWindowPosition(0,0); glutCreateWindow(&quot;Rotate Created Triangle&quot;); init();</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glutDisplayFunc(display); glutCreateMenu(rotate_menu);</p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">glutAddMenuEntry(&quot;Rotate Around Origin&quot;,1); glutAddMenuEntry(&quot;Rotate Around Fixed Points&quot;,2); glutAddMenuEntry(&quot;Stop Rotation&quot;,3);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glutAttachMenu(GLUT_RIGHT_BUTTON); glutMainLoop();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><a name="bookmark12">OUTPUT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 57pt;text-indent: 0pt;text-align: left;"><span><img width="554" height="765" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_026.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="3."><p class="s4" style="padding-top: 4pt;padding-left: 52pt;text-indent: -14pt;text-align: left;">Draw a color cube and spin it using OpenGL transformation matrices</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_027.png"/></span></p><p style="padding-top: 10pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">#include&lt;stdio.h&gt; #include&lt;math.h&gt; #include&lt;GL/glut.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">// 8 vertices of the cube with origin as its centroid</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">float v[][3] = { { -1,-1,-1 } ,{ -1,1,-1 } ,{ 1,1,-1 } ,{ 1,-1,-</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">1 } ,{ -1,-1,1 } ,{ -1,1,1 } ,{ 1,1,1 } ,{ 1,-1,1 } };</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">int t[] = { 0,0,0 }; // degree of rotation along {x,y,z} int ax = 2; // axis of rotation</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">void init()</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glMatrixMode(GL_PROJECTION); glOrtho(-4, 4, -4, 4, -10, 10);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">// location where your object gets modelled glMatrixMode(GL_MODELVIEW); }</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">// function used to draw one face of a cube at a time void polygon(int a, int b, int c, int d)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glBegin(GL_POLYGON);// draw the square using polygon</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">// 4 coordinates of the square face</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">// each v[i] contains 3 values (x,y,z) which denotes a point in 3D plane</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 74pt;text-indent: 0pt;text-align: justify;">glVertex3fv(v[a]); glVertex3fv(v[b]); glVertex3fv(v[c]); glVertex3fv(v[d]); glEnd();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">//function used to color each face of the cube seperately void colorcube()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glColor3f(0, 0, 1);   //color of front square polygon(0, 1, 2, 3);   // drawing the front square glColor3f(0, 1, 1);   // color of the left square polygon(4, 5, 6, 7);   // drawing the left square glColor3f(0, 1, 0);   // color of the right square polygon(0, 1, 5, 4);   // drawing the right square glColor3f(1, 0, 0);   // color of the top square</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">polygon(2, 6, 7, 3);   // drawing the top square glColor3f(1, 1, 0);   // color of the bottom square polygon(0, 4, 7, 3);   // drawing the bottom square glColor3f(1, 0, 1);   // color of the back square polygon(1, 5, 6, 2);   // drawing the back square</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_028.png"/></span></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void spincube()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">// rotating the cube by 1 degree at a time on the given axis &quot;ax&quot; ( ax = 0 is x axis , ax =1 is y axis , ax =2 is z axis)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">t[ax] += 1;</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">if (t[ax] == 360)</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">// when the rotation along any axis reaches 360 reset the axis to 0</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">t[ax] -= 360;</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">glutPostRedisplay();  // calling the display again..</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">// function is used to capture the events of the mouse and rotate cube accordingly</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">void mouse(int btn, int state, int x, int y)</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">// on left click, state of the left button is set to DOWN and ax =0</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">if (btn == GLUT_LEFT_BUTTON &amp;&amp; state == GLUT_DOWN) ax = 0;</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">//ie rotate along x axis</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">if (btn == GLUT_MIDDLE_BUTTON &amp;&amp; state == GLUT_DOWN)</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">// on middle click, state of the middle button is set to DOWN .. and ax=1</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">ax = 1;</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">//ie rotate along y axis</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">if (btn == GLUT_RIGHT_BUTTON &amp;&amp; state == GLUT_DOWN)</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">// on right click, state of the right button is set to DOWN.. and ax=2</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">ax = 2;</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">//ie rotate along z axis</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void display() // display function</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">//clears the color buffer and depth buffer glClearColor(1, 1, 1, 1);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">//sets the backround screen color glLoadIdentity();</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_029.png"/></span></p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">//loads identity matrix into modelview</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">//glrotatef(angle of rotation,x,y,z) glRotatef(t[0], 1, 0, 0);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">//rotate cube at an angle of t[0] degrees wrt vector(1,0,0) glRotatef(t[1], 0, 1, 0);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">//rotate cube at an angle of t[1] degrees wrt vector(0,1,0) glRotatef(t[2], 0, 0, 1);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">//rotate cube at an angle of t[2] degrees wrt vector(0,0,1) colorcube();</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">// call the function to color each square of cube with different colors</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glutSwapBuffers(); glFlush();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">int main(int argc, char **argv)</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glutInit(&amp;argc, argv);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH); glutInitWindowPosition(100, 100); // set window position glutInitWindowSize(500, 500); //set window size glutCreateWindow(&quot;Cube rotation&quot;);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">init(); glutIdleFunc(spincube);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glutMouseFunc(mouse);  // calls the mouse function... glutmousefunc captures your mouse activity glEnable(GL_DEPTH_TEST); //enabling the depth buffer glutDisplayFunc(display);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glutMainLoop(); return 0;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><a name="bookmark13">OUTPUT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 42pt;text-indent: 0pt;text-align: left;"><span><img width="600" height="678" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_030.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="4."><p class="s4" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">Draw a color cube and allow the user to move the camera suitably to experiment with perspective viewing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_031.png"/></span></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">#include&lt;stdio.h&gt; #include&lt;math.h&gt; #include&lt;GL/glut.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">float pts[8][3] = {</p><p style="padding-left: 146pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{-1,-1,-1},</p><p style="padding-left: 146pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{-1,1,-1},</p><p style="padding-left: 146pt;text-indent: 0pt;line-height: 14pt;text-align: left;">{1,1,-1},</p><p style="padding-left: 146pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{1,-1,-1},</p><p style="padding-left: 146pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{-1,-1,1},</p><p style="padding-left: 146pt;text-indent: 0pt;line-height: 14pt;text-align: left;">{-1,1,1},</p><p style="padding-left: 146pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{1,1,1},</p><p style="padding-left: 146pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{1,-1,1}</p><p style="padding-left: 138pt;text-indent: 0pt;line-height: 13pt;text-align: left;">};</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">float theta[] ={0,0,0}; int axis = 2;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">float viewer[]={5,0,0};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void myInit()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glMatrixMode(GL_PROJECTION); glFrustum(-2,2,-2,2,2,10); glMatrixMode(GL_MODELVIEW);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void draw_polygon(int a, int b, int c, int d)</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 110pt;text-indent: -36pt;text-align: left;">glBegin(GL_QUADS); glVertex3fv(pts[a]); glVertex3fv(pts[b]); glVertex3fv(pts[c]); glVertex3fv(pts[d]);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glEnd();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void draw_cube(float pts[8][3])</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glColor3f(0,0,1); draw_polygon(0,1,2,3); //front face glColor3f(0,1,0); draw_polygon(4,5,6,7);  //behind face glColor3f(1,0,0); draw_polygon(0,1,5,4);  //left face</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">glColor3f(0,0,0); draw_polygon(3,2,6,7);  //right face glColor3f(0,1,1); draw_polygon(0,4,7,3);  //bottom face glColor3f(1,0,1); draw_polygon(1,5,6,2);  //top face</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_032.png"/></span></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void myDisplay()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glClearColor(1,1,1,1); glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glLoadIdentity(); gluLookAt(viewer[0],viewer[1],viewer[2],0,0,0,0,1,0); glRotatef(theta[2],0,0,1);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glRotatef(theta[1],0,1,0);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glRotatef(theta[0],1,0,0); draw_cube(pts); glFlush(); glutSwapBuffers();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void spincube()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">theta[axis] = theta[axis]+4; if(theta[axis]&gt;360)</p><p style="padding-left: 74pt;text-indent: 36pt;text-align: left;">theta[axis]=0; glutPostRedisplay();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void mouse(int btn , int state , int x , int y)</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 110pt;text-indent: -36pt;text-align: left;">if((btn==GLUT_LEFT_BUTTON)&amp;&amp;(state==GLUT_DOWN)) axis=0;</p><p style="padding-left: 110pt;text-indent: -36pt;text-align: left;">if((btn==GLUT_RIGHT_BUTTON)&amp;&amp;(state==GLUT_DOWN)) axis=2;</p><p style="padding-left: 110pt;text-indent: -36pt;text-align: left;">if((btn==GLUT_MIDDLE_BUTTON)&amp;&amp;(state==GLUT_DOWN)) axis=1;</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">spincube();</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void keyboard(unsigned char key, int x, int y)</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: justify;">if(key==&#39;X&#39;) viewer[0]+=1; if(key==&#39;x&#39;) viewer[0]-=1; if(key==&#39;Y&#39;) viewer[1]+=1;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 74pt;text-indent: 0pt;text-align: justify;">if(key==&#39;y&#39;) viewer[1]-=1; if(key==&#39;Z&#39;) viewer[2]+=1; if(key==&#39;z&#39;) viewer[2]-=1; glutPostRedisplay();</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="666" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_033.png"/></span></p><p style="text-indent: 0pt;text-align: left;">int main (int argc, char ** argv)</p><p style="text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 36pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glutInit(&amp;argc,argv);</p><p style="padding-left: 36pt;text-indent: 0pt;text-align: left;">glutInitDisplayMode( GLUT_DOUBLE|GLUT_RGB|GLUT_DEPTH); glutInitWindowPosition(50,50); glutInitWindowSize(500,500); glutCreateWindow(&quot;Positioning of Camera&quot;);</p><p style="padding-left: 36pt;text-indent: 0pt;text-align: left;">myInit(); glEnable(GL_DEPTH_TEST); glutDisplayFunc(myDisplay); glutKeyboardFunc(keyboard); glutMouseFunc(mouse); glutMainLoop();</p><p style="text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="text-indent: 0pt;text-align: left;">OUTPUT</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 57pt;text-indent: 0pt;text-align: left;"><span><img width="566" height="711" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_034.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="5."><p class="s4" style="padding-top: 4pt;padding-left: 52pt;text-indent: -14pt;text-align: left;"><a name="bookmark14">Clip a lines using Cohen-Sutherland algorithm.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 10pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">#include&lt;stdio.h&gt; #include&lt;GL/glut.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_035.png"/></span></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">#define true 1;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">#define false 0; #define bool int; double x,y;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 200%;text-align: left;">int xmin=50,xmax=100,ymin=50,ymax=100; const int RIGHT=8,LEFT=2,TOP=4,BOTTOM=1;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">int outcode0,outcode1,outcodeout,done,accept;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">int computeoutcode(double x,double y)</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;">int code=0; if(y&gt;ymax)</p><p style="padding-left: 52pt;text-indent: 14pt;text-align: left;">code|=TOP; else if(y&lt;ymin)</p><p style="padding-left: 52pt;text-indent: 14pt;text-align: left;">code|=BOTTOM; if(x&gt;xmax)</p><p style="padding-left: 52pt;text-indent: 14pt;text-align: left;">code|=RIGHT; else if(x&lt;xmin)</p><p style="padding-left: 52pt;text-indent: 14pt;text-align: left;">code|=LEFT; return code;</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void LineClip(double x0,double y0,double x1,double y1)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 52pt;text-indent: 0pt;text-align: justify;">int accept=false; int done=false;</p><p style="padding-left: 52pt;text-indent: 0pt;text-align: justify;">outcode0=computeoutcode(x0,y0); outcode1=computeoutcode(x1,y1); do{</p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 13pt;text-align: left;">if(!(outcode0|outcode1))</p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 81pt;text-indent: 0pt;text-align: left;">accept=true; done=true;</p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 14pt;text-align: left;">else if(outcode0&amp;outcode1)</p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 14pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 81pt;text-indent: 0pt;text-align: left;">done=true;</p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">else</p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 81pt;text-indent: 0pt;text-align: left;">outcodeout=outcode0?outcode0:outcode1; if(outcodeout &amp; TOP)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_036.png"/></span></p><p style="padding-left: 81pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;">x=x0+(x1-x0)*(ymax-y0)/(y1-y0); y=ymax;</p><p style="padding-left: 81pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 81pt;text-indent: 0pt;text-align: left;">else if(outcodeout &amp; BOTTOM)</p><p style="padding-left: 81pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;">x=x0+(x1-x0)*(ymin-y0)/(y1-y0); y=ymin;</p><p style="padding-left: 81pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 81pt;text-indent: 0pt;line-height: 14pt;text-align: left;">else if(outcodeout &amp; RIGHT)</p><p style="padding-left: 81pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;">y=y0+(y1-y0)*(xmax-x0)/(x1-x0); x=xmax;</p><p style="padding-left: 81pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 81pt;text-indent: 0pt;text-align: left;">else</p><p style="padding-left: 81pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;">y=y0+(y1-y0)*(xmin-x0)/(x1-x0); x=xmin;</p><p style="padding-left: 81pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 81pt;text-indent: 0pt;text-align: left;">if(outcodeout==outcode0)</p><p style="padding-left: 81pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;">x0=x;y0=y;outcode0=computeoutcode(x0,y0);</p><p style="padding-left: 81pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 81pt;text-indent: 0pt;line-height: 14pt;text-align: left;">else</p><p style="padding-left: 81pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;">x1=x;y1=y;outcode1=computeoutcode(x1,y1);</p><p style="padding-left: 81pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="padding-left: 66pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;">}while(!done); if(accept)</p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">glPushMatrix(); glTranslatef(100,100,0); glColor3f(1.0,0.0,0.0); glBegin(GL_LINE_LOOP); glVertex2i(50,50); glVertex2i(100,50); glVertex2i(100,100); glVertex2i(50,100); glEnd();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 66pt;text-indent: 0pt;text-align: left;">glColor3f(1.0,0.0,1.0); glBegin(GL_LINES); glVertex2i(x0,y0); glVertex2i(x1,y1); glEnd();</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_037.png"/></span></p><p style="padding-left: 66pt;text-indent: 0pt;text-align: left;">glPopMatrix(); glFlush();</p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void display()</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;">glClearColor(1,1,1,1); glClear(GL_COLOR_BUFFER_BIT); glColor3f(1.0,0.0,0.0); glBegin(GL_LINE_LOOP);</p><p style="padding-left: 81pt;text-indent: -7pt;text-align: left;">glVertex2i(50,50); glVertex2i(100,50);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glVertex2i(100,100); glVertex2i(50,100);</p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;">glEnd(); glColor3f(1.0,0.0,1.0); glBegin(GL_LINES);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glVertex2i(60,20); glVertex2i(80,120); glVertex2i(80,20); glVertex2i(60,120);</p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;">glEnd(); LineClip(60,20,80,120); LineClip(80,20,60,120);</p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glFlush();</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void init()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;">glMatrixMode(GL_PROJECTION); gluOrtho2D(0,300,0,300);</p><p style="padding-left: 52pt;text-indent: 0pt;line-height: 14pt;text-align: left;">glMatrixMode(GL_MODELVIEW);</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">int main(int argc,char** argv)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 52pt;text-indent: 0pt;text-align: left;">glutInit(&amp;argc,argv); glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB); glutInitWindowPosition(0,0); glutInitWindowSize(500,500);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">glutCreateWindow(&quot;Cohen Sutherland line and drawing algorithm&quot;); init();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glutDisplayFunc(display); glutMainLoop();</p><p style="text-indent: 0pt;text-align: left;"><span><img width="613" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_038.png"/></span></p><p class="s22" style="text-indent: 0pt;line-height: 13pt;text-align: left;">OUTPUT</p><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="6."><p class="s4" style="padding-top: 12pt;padding-left: 38pt;text-indent: 0pt;text-align: justify;"><a name="bookmark15">To draw a simple shaded scene consisting of a tea pot on a table. Define suitably the position and properties of the light source along with the properties of the surfaces of the solid object used in the scene.</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_039.png"/></span></p><p style="padding-top: 10pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">#include&lt;GL/glut.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">void obj(double tx,double ty,double tz,double sx,double sy,double sz)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: -7pt;text-align: left;">glRotated(50,0,1,0); glRotated(10,-1,0,0);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glRotated(11.7,0,0,-1); glTranslated(tx,ty,tz); glScaled(sx,sy,sz); glutSolidCube(1); glLoadIdentity();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void display()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glViewport(0,0,700,700); glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT); obj(0,0,0.5,1,1,0.04);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">obj(0,-0.5,0,1,0.04,1);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">obj(-0.5,0,0,0.04,1,1);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">obj(0,-0.3,0,0.02,0.2,0.02);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">obj(0,-0.3,-0.4,0.02,0.2,0.02);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">obj(0.4,-0.3,0,0.02,0.2,0.02);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">obj(0.4,-0.3,-0.4,0.02,0.2,0.02);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">obj(0.2,-0.18,-0.2,0.6,0.02,0.6);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glRotated(50,0,1,0); glRotated(10,-1,0,0);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glRotated(11.7,0,0,-1);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glTranslated(0.3,-0.1,-0.3); glutSolidTeapot(0.09); glFlush();</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glLoadIdentity();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">int main(int argc,char **argv)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glutInit(&amp;argc,argv); float ambient[]={1,1,1,1};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="591" height="660" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_040.png"/></span></p><p style="padding-top: 5pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">float light_pos[]={27,80,2,3}; glutInitWindowSize(700,700); glutCreateWindow(&quot;Tea Pot&quot;); glutDisplayFunc(display); glEnable(GL_LIGHTING); glEnable(GL_LIGHT0); glMaterialfv(GL_FRONT,GL_AMBIENT,ambient); glLightfv(GL_LIGHT0,GL_POSITION,light_pos); glEnable(GL_DEPTH_TEST);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">glutMainLoop();</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><a name="bookmark16">OUTPUT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="7."><p class="s4" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: justify;">Design, develop and implement recursively subdivide a tetrahedron to form 3D sierpinski gasket. The number of recursive steps is to be specified by the user.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_041.png"/></span></p><p style="padding-top: 10pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">#include&lt;stdio.h&gt; #include&lt;math.h&gt; #include&lt;GL/glut.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">float v[4][3] = {</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 10pt;text-indent: 0pt;line-height: 13pt;text-align: right;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;">{ 0.0,0.0,1.0 },</p><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;">{ 0,1,-1 },</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 14pt;text-align: left;">{ -0.8,-0.4,-1 },</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 14pt;text-align: left;">{ 0.8,-0.4,-1 }</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">int n;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void triangle(float a[], float b[], float c[])</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glBegin(GL_POLYGON); glVertex3fv(a); glVertex3fv(b); glVertex3fv(c); glEnd();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void divide_triangle(float a[], float b[], float c[], int m)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">float v1[3], v2[3], v3[3]; int i;</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">if (m&gt;0)</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">for (i = 0; i&lt;3; i++) v1[i] = (a[i] + b[i]) / 2;</p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">for (i = 0; i&lt;3; i++) v2[i] = (a[i] + c[i]) / 2;</p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">for (i = 0; i&lt;3; i++) v3[i] = (b[i] + c[i]) / 2; divide_triangle(a, v1, v2, m - 1); divide_triangle(c, v2, v3, m - 1); divide_triangle(b, v3, v1, m - 1);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">else (triangle(a, b, c));</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void tetrahedron(int m)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_042.png"/></span></p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glColor3f(1.0, 0.0, 0.0); divide_triangle(v[0], v[1], v[2], m); glColor3f(0.0, 1.0, 0.0); divide_triangle(v[3], v[2], v[1], m); glColor3f(0.0, 0.0, 1.0); divide_triangle(v[0], v[3], v[1], m); glColor3f(1.0, 1.0, 0.0); divide_triangle(v[0], v[2], v[3], m);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void display()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glMatrixMode(GL_PROJECTION); glLoadIdentity();</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glOrtho(-2.0, 2.0, -2.0, 2.0, -10.0, 10.0);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glMatrixMode(GL_MODELVIEW); glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">tetrahedron(n); glFlush(); glutPostRedisplay();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">int main(int argc, char* argv[])</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">printf(&quot;Enter the number of divisions: &quot;); scanf(&quot;%d&quot;, &amp;n);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glutInit(&amp;argc, argv);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH); glutInitWindowSize(500, 500);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glutInitWindowPosition(0, 0); glutCreateWindow(&quot;3D Gasket&quot;); glutDisplayFunc(display); glEnable(GL_DEPTH_TEST); glClearColor(1.0, 1.0, 1.0, 1.0); glutMainLoop();</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">return 0;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><a name="bookmark17">OUTPUT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 57pt;text-indent: 0pt;text-align: left;"><span><img width="554" height="624" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_043.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="8."><p class="s4" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">Develop a menu driven program to animate a flag using Bezier Curve algorithm.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_044.png"/></span></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">#include&lt;GL/glut.h&gt; #include&lt;stdio.h&gt; #include&lt;math.h&gt; #define pi 3.1416 static float th = 0;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">GLint nCP = 4, nBCP = 20;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">typedef struct wc</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">GLfloat x, y, z;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">};</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">void bino(GLint n, GLint *c)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">GLint k, j;</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">for (k = 0; k &lt;= n; k++)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">c[k] = 1;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">for (j = n; j &gt;= k + 1; j--) c[k] *= j;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">for (j = n - k; j &gt;= 2; j--) c[k] /= j;</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">void computeBezPt(GLfloat u, wc *bP, GLint nCP, wc *cP,GLint *c)</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">GLint k, n = nCP - 1; GLfloat BEZ;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">bP-&gt;x = bP-&gt;y = bP-&gt;z = 0; for (k = 0; k&lt;nCP; k++)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">BEZ = c[k] * pow(u, k)*pow(1 - u, n - k); bP-&gt;x += cP[k].x*BEZ;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">bP-&gt;y += cP[k].y*BEZ; bP-&gt;z += cP[k].z*BEZ;</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void bezier(wc *cP, GLint nCP, GLint nBCP)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">wc bCP;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">GLfloat u;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">GLint *c, k;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_045.png"/></span></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">c = new GLint[nCP]; bino(nCP - 1, c); glBegin(GL_LINE_STRIP); for (k = 0; k &lt;= nBCP; k++)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">u = GLfloat(k) / GLfloat(nBCP); computeBezPt(u, &amp;bCP, nCP, cP, c); glVertex2f(bCP.x, bCP.y);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glEnd(); delete[]c;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">void display()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glClearColor(0, 0, 0, 1);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void draw_and_animate()</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">wc cP[4] = {</p><p style="padding-left: 146pt;text-indent: 0pt;text-align: left;">{ 20,100,0 },</p><p style="padding-left: 146pt;text-indent: 0pt;text-align: left;">{ 30,110,0 },</p><p style="padding-left: 146pt;text-indent: 0pt;line-height: 14pt;text-align: left;">{ 50,90,0 },</p><p style="padding-left: 146pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{ 60,100,0 }</p><p style="padding-left: 110pt;text-indent: 0pt;line-height: 13pt;text-align: left;">};</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: justify;">cP[1].x += 10 * sin(th*pi / 180); cP[1].y += 5 * sin(th*pi / 180);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: justify;">cP[2].x -= 10 * sin((th + 30)*pi / 180); cP[2].y -= 10 * sin((th + 30)*pi / 180); cP[3].x -= 4 * sin(th*pi / 180);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: justify;">cP[3].x += sin((th - 30)*pi / 180); th += 0.1;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glClear(GL_COLOR_BUFFER_BIT); glColor3f(1, 1, 1); glPushMatrix(); glLineWidth(5);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glColor3f(255 / 255, 153 / 255.0, 51 / 255.0); //saffron for (int i = 0; i&lt;8; i++)</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glTranslatef(0, -.8, 0); bezier(cP, nCP, nBCP);</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_046.png"/></span></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glColor3f(1, 1, 1); //white for (int i = 0; i&lt;8; i++)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glTranslatef(0, -.8, 0); bezier(cP, nCP, nBCP);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glColor3f(19 / 255.0, 136 / 255.0, 8 / 255.0); //green for (int i = 0; i&lt;8; i++)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glTranslatef(0, -.8, 0); bezier(cP, nCP, nBCP);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glPopMatrix();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glColor3f(.7, .5, .3); //flag pole glLineWidth(5); glBegin(GL_LINES);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glVertex2f(20, 100);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glVertex2f(20, 40); glEnd();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glFlush(); glutPostRedisplay(); glutSwapBuffers();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">void reshape(GLint w, GLint h)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glViewport(0, 0, w, h); glMatrixMode(GL_PROJECTION); glLoadIdentity(); gluOrtho2D(0, 150, 0, 150);</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">glClear(GL_COLOR_BUFFER_BIT);</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void menu(int id)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">switch (id)</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: left;"><span><img width="590" height="694" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_047.png"/></span></p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">case 1:glutIdleFunc(draw_and_animate); break;</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">case 2:glutIdleFunc(NULL); break;</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glutPostRedisplay();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">int main(int argc, char **argv)</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glutInit(&amp;argc, argv); glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB); glutInitWindowPosition(50, 50);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glutInitWindowSize(640, 840); glutCreateWindow(&quot;Bezier Curve&quot;); glutReshapeFunc(reshape); glutDisplayFunc(display); glClearColor(0, 0, 0, 1); glFlush();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">glutCreateMenu(menu); glutAddMenuEntry(&quot;Draw and animate&quot;, 1); glutAddMenuEntry(&quot;Stop animation&quot;, 2); glutAttachMenu(GLUT_LEFT_BUTTON); glutMainLoop();</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">return 0;</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-left: 38pt;text-indent: 0pt;text-align: left;"><a name="bookmark18">OUTPUT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="9."><p class="s4" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">Develop a menu driven program to fill the polygon using scan line algorithm.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">#include&lt;stdio.h&gt; #include&lt;math.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_048.png"/></span></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">#include&lt;GL/glut.h&gt;</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">int le[500], re[500], flag=0 ,m;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">void init()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">gluOrtho2D(0, 500, 0, 500);</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void edge(int x0, int y0, int x1, int y1)</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">if (y1&lt;y0)</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">int tmp; tmp = y1; y1 = y0; y0 = tmp; tmp = x1; x1 = x0; x0 = tmp;</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">int x = x0;</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">m = (y1 - y0) / (x1 - x0); for (int i = y0; i&lt;y1; i++)</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 110pt;text-indent: 0pt;line-height: 14pt;text-align: left;">if (x&lt;le[i])</p><p style="padding-left: 146pt;text-indent: 0pt;line-height: 13pt;text-align: left;">le[i] = x;</p><p style="padding-left: 110pt;text-indent: 0pt;line-height: 13pt;text-align: left;">if (x&gt;re[i])</p><p style="padding-left: 146pt;text-indent: 0pt;line-height: 14pt;text-align: left;">re[i] = x;</p><p style="padding-left: 110pt;text-indent: 0pt;line-height: 14pt;text-align: left;">x += (1 / m);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">void display()</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glClearColor(1, 1, 1, 1); glClear(GL_COLOR_BUFFER_BIT); glColor3f(0, 0, 1); glBegin(GL_LINE_LOOP); glVertex2f(200, 100);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glVertex2f(100, 200);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">glVertex2f(200, 300);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glVertex2f(300, 200); glEnd();</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">for (int i = 0; i&lt;500; i++)</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">le[i] = 500;</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_049.png"/></span></p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">re[i] = 0;</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">edge(200, 100, 100, 200);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">edge(100, 200, 200, 300);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">edge(200, 300, 300, 200);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">edge(300, 200, 200, 100);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">if (flag == 1)</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 110pt;text-indent: 0pt;text-align: left;">for (int i = 0; i &lt; 500; i++)</p><p style="padding-left: 110pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 146pt;text-indent: 0pt;text-align: left;">if (le[i] &lt; re[i])</p><p style="padding-left: 146pt;text-indent: 0pt;text-align: left;">{</p><p style="padding-left: 182pt;text-indent: 0pt;line-height: 14pt;text-align: left;">for (int j = le[i]; j &lt; re[i]; j++)</p><p style="padding-left: 182pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 218pt;text-indent: 0pt;text-align: left;">glColor3f(1, 0, 0); glBegin(GL_POINTS); glVertex2f(j, i); glEnd();</p><p style="padding-left: 182pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 146pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 110pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glFlush();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;text-align: left;">void ScanMenu(int id)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="text-indent: 0pt;text-align: right;">if (id == 1) {</p><p style="text-indent: 0pt;line-height: 13pt;text-align: right;">flag = 1;</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="padding-left: 110pt;text-indent: -36pt;text-align: left;">else if (id == 2) { flag = 0;</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">}</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">else { exit(0); } glutPostRedisplay();</p><p style="padding-left: 38pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">int main(int argc, char **argv)</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 13pt;text-align: left;">{</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glutInit(&amp;argc, argv);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 74pt;text-indent: 0pt;text-align: left;">glutInitWindowPosition(100, 100);</p><p style="text-indent: 0pt;text-align: left;"><span><img width="611" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_050.png"/></span></p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glutInitWindowSize(500, 500); glutCreateWindow(&quot;scan line&quot;); init(); glutDisplayFunc(display); glutCreateMenu(ScanMenu); glutAddMenuEntry(&quot;scanfill&quot;, 1);</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 13pt;text-align: left;">glutAddMenuEntry(&quot;clear&quot;, 2);</p><p style="padding-left: 74pt;text-indent: 0pt;text-align: left;">glutAddMenuEntry(&quot;exit&quot;, 3); glutAttachMenu(GLUT_RIGHT_BUTTON); glutMainLoop();</p><p style="padding-left: 74pt;text-indent: 0pt;line-height: 14pt;text-align: left;">return 0;</p><p style="padding-left: 38pt;text-indent: 0pt;line-height: 14pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s22" style="padding-top: 4pt;padding-left: 38pt;text-indent: 0pt;text-align: left;"><a name="bookmark19">OUTPUT</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s4" style="padding-top: 4pt;padding-left: 42pt;text-indent: 0pt;text-align: center;"><a name="bookmark20">VIVA QUESTIONS</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><ol id="l7"><li data-list-text="1."><p class="s16" style="padding-top: 4pt;padding-left: 74pt;text-indent: -18pt;text-align: left;">Define Computer graphics.</p></li><li data-list-text="2."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Define Computer Animation?</p></li><li data-list-text="3."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Define Pixel?</p></li><li data-list-text="4."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Define Raster graphics?</p><p style="text-indent: 0pt;text-align: left;"><span><img width="566" height="615" alt="image" src="ACFrOgAermzik2Nf7ecHk9HDCbMSd7CkAxcQQBYtMNLrwqWqfgU4HsxL1Ml4-EJqfoj3ZNGXI7Z6XsKXTHlGHVwqWwaVT3exOQnNv5KF8aKc-AhxtZ9BT4uCIaMqZQBujVAp2qbDKf4LczfTF2dL_files/Image_051.png"/></span></p></li><li data-list-text="5."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Define Image?</p></li><li data-list-text="6."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Define Rendering?</p></li><li data-list-text="7."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Define Projection?</p></li><li data-list-text="8."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Define 3D Projection?</p></li><li data-list-text="9."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Define Grayscale?</p></li><li data-list-text="10."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Define Image Resolution?</p></li><li data-list-text="11."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Define WCS?</p></li><li data-list-text="12."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Write the two techniques for producing color displays with a CRT?</p></li><li data-list-text="13."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What is resolution?</p></li><li data-list-text="14."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What is pixel map?</p></li><li data-list-text="15."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Write the types of clipping?</p></li><li data-list-text="16."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What is persistence?</p></li><li data-list-text="17."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What is frame buffer?</p></li><li data-list-text="18."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Define Circle?</p></li><li data-list-text="19."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What are the various attributes of a line?</p></li><li data-list-text="20."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What is anti-aliasing?</p></li><li data-list-text="21."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What is Transformation?</p></li><li data-list-text="22."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What is translation?</p></li><li data-list-text="23."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What is rotation?</p></li><li data-list-text="24."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What is scaling?</p></li><li data-list-text="25."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What is shearing?</p></li><li data-list-text="26."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What is reflection?</p></li><li data-list-text="27."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What are the two classifications of shear transformation?</p></li><li data-list-text="28."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Distinguish between window port &amp; view port?</p></li><li data-list-text="29."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Define clipping?</p></li><li data-list-text="30."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What is the need of homogeneous coordinates?</p></li><li data-list-text="31."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What is rasterization?</p></li><li data-list-text="32."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Differentiate plasma panel display and thin film electro luminescent display?</p></li><li data-list-text="33."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Write The Important Applications of Computer Graphic?</p></li><li data-list-text="34."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What Is Scan Conversion?</p></li><li data-list-text="35."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What Is Pix Map?</p></li><li data-list-text="36."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">Where The Video Controller Is Used?</p></li><li data-list-text="37."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What is OpenGL?</p></li><li data-list-text="38."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">What are the advantages of OpenGL over other API&#39;s?</p></li><li data-list-text="39."><p class="s16" style="padding-left: 74pt;text-indent: -18pt;line-height: 14pt;text-align: left;">How Display lists are implemented in OpenGL?</p></li></ol></li></ol></body></html>
